import 'package:hive/hive.dart';

part 'scenario.g.dart'; // This file will be generated by running `flutter packages pub run build_runner build`

@HiveType(typeId: 0) // Ensure this typeId is unique across your Hive models
class Scenario extends HiveObject {
  @HiveField(0)
  String id;

  @HiveField(1)
  String categoryId;

  @HiveField(2)
  String titleEn;

  @HiveField(3)
  String titleAr;

  @HiveField(4)
  List<Map<String, String>> steps; // List of maps for steps: [{'en': '...', 'ar': '...'}]

  @HiveField(5)
  List<Map<String, String>> notes; // New field for notes: [{'type': 'warning', 'en': '...', 'ar': '...'}]

  @HiveField(6)
  String? sourceUrl; // New field for source URL, nullable

  Scenario({
    required this.id,
    required this.categoryId,
    required this.titleEn,
    required this.titleAr,
    required this.steps,
    this.notes = const [], // Default to an empty list if no notes are provided
    this.sourceUrl, // Nullable field
  });

  // You might want to add a factory constructor for easy deserialization from JSON if needed
  factory Scenario.fromJson(Map<String, dynamic> json) {
    return Scenario(
      id: json['id'] as String,
      categoryId: json['categoryId'] as String,
      titleEn: json['titleEn'] as String,
      titleAr: json['titleAr'] as String,
      steps: List<Map<String, String>>.from(
        json['steps'].map((step) => Map<String, String>.from(step)),
      ),
      notes: json['notes'] != null
          ? List<Map<String, String>>.from(
              json['notes'].map((note) => Map<String, String>.from(note)),
            )
          : [],
      sourceUrl: json['sourceUrl'] as String?,
    );
  }

  // And a toJson method for serialization to JSON
  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'categoryId': categoryId,
      'titleEn': titleEn,
      'titleAr': titleAr,
      'steps': steps,
      'notes': notes,
      'sourceUrl': sourceUrl,
    };
  }
}
